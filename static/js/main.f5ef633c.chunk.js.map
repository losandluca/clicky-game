{"version":3,"sources":["components/image/Image.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Image","_this","this","react_default","a","createElement","className","onClick","props","updateClicked","name","src","img","React","Component","Header","id","score","hScore","App","state","clicked","indexOf","alert","setState","push","console","log","randomImage","newArr","length","images","image","Math","floor","random","_this2","href","rel","integrity","crossOrigin","header_Header","map","e","image_Image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o+BAaeA,0LATH,IAAAC,EAAAC,KACJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAMN,EAAKO,MAAMC,cAAcR,EAAKO,MAAME,OAAOA,KAAMR,KAAKM,MAAME,KAAMJ,UAAU,UAAUK,IAAKT,KAAKM,MAAMI,cAJtHC,IAAMC,mBCeXC,0LAZP,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKW,GAAG,QAAR,4BACAb,EAAAC,EAAAC,cAAA,OAAKW,GAAG,SACJb,EAAAC,EAAAC,cAAA,mBAAWH,KAAKM,MAAMS,OACtBd,EAAAC,EAAAC,cAAA,KAAGW,GAAG,MAAN,eAAwBd,KAAKM,MAAMU,iBARlCL,IAAMC,YCqEZK,oNAhEbC,MAAQ,CACNC,QAAS,GACTJ,MAAO,EACPC,OAAQ,KAGVT,cAAgB,SAAAC,GACd,GAAGT,EAAKmB,MAAMC,QAAQC,QAAQZ,IAAO,EAUnC,OATAa,MAAM,8BACNtB,EAAKuB,SAAS,CAAEH,QAAS,KAEtBpB,EAAKmB,MAAMH,MAAQhB,EAAKmB,MAAMF,QAC/BjB,EAAKuB,SAAS,CAAEN,OAAQjB,EAAKmB,MAAMH,aAGrChB,EAAKuB,SAAS,CAAEP,MAAO,IAKvB,IAAIA,EAAQhB,EAAKmB,MAAMH,QACvBA,EAEWhB,EAAKmB,MAAMF,QACpBjB,EAAKuB,SAAS,CAAEN,OAAQD,IAE1BhB,EAAKuB,SAAS,CAAEP,MAAOA,IAGzB,IAAII,EAAUpB,EAAKmB,MAAMC,QACzBA,EAAQI,KAAKf,GACbT,EAAKuB,SAAS,CAAEH,YAChBK,QAAQC,IAAI1B,EAAKmB,MAAMC,YAGzBO,YAAc,WAEV,IADF,IAAMC,EAAS,GACPA,EAAOC,SAAWC,EAAOD,QAAO,CACpC,IAAIE,EAAQD,EAAOE,KAAKC,MAAMD,KAAKE,SAASJ,EAAOD,SAChDD,EAAOP,QAAQU,GAAO,GACvBH,EAAOJ,KAAKO,GAGlB,OAAOH,2EAGA,IAAAO,EAAAlC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAMgC,KAAK,0DAA0DC,IAAI,eACzEnC,EAAAC,EAAAC,cAAA,UAAQM,IAAI,0CAA0C4B,UAAU,sDAAsDC,YAAY,cAClIrC,EAAAC,EAAAC,cAACoC,EAAD,CAAQxB,MAAOf,KAAKkB,MAAMH,MAAOC,OAAQhB,KAAKkB,MAAMF,SAChDhB,KAAK0B,cAAcc,IAAI,SAAAC,GAAC,OAEpBxC,EAAAC,EAAAC,cAACuC,EAAD,CAAQnC,cAAe2B,EAAK3B,cACpBC,KAAMiC,EAAEjC,KACRE,IAAK+B,EAAE/B,gBA1DbE,cCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5ef633c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './image.css'\r\n\r\nclass Image extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className='image-container'>\r\n                <img onClick={() => this.props.updateClicked(this.props.name)} name={this.props.name} className='ind-img' src={this.props.img}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Image;","import React from 'react'\r\nimport './header.css'\r\n\r\nclass Header extends React.Component {\r\n    \r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <div id='home'>Clicky Game üê∂</div>\r\n                <div id='score'>\r\n                    <p>Score: {this.props.score}</p>\r\n                    <p id='hs'>High Score: {this.props.hScore}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\nimport Image from './components/image/Image'\nimport images from './images.json'\nimport Header from './components/header/Header'\nimport './App.css'\n\nclass App extends Component {\n  \n  state = {\n    clicked: [],\n    score: 0,\n    hScore: 0\n   }\n  \n  updateClicked = name => {\n    if(this.state.clicked.indexOf(name)>-1){\n      alert('You lost! Please try again')\n      this.setState({ clicked: [] })\n    \n      if(this.state.score > this.state.hScore){\n        this.setState({ hScore: this.state.score })\n      }\n\n      this.setState({ score: 0 })\n      \n      return;\n\n    } else {\n      var score = this.state.score;\n      score++;\n\n      if(score > this.state.hScore){\n        this.setState({ hScore: score })\n      }\n      this.setState({ score: score })\n    }\n\n    let clicked = this.state.clicked\n    clicked.push(name)    \n    this.setState({ clicked })\n    console.log(this.state.clicked)\n  }\n\n  randomImage = () => {\n    const newArr = [];\n      while(newArr.length !== images.length){\n        let image = images[Math.floor(Math.random()*images.length)];\n        if(newArr.indexOf(image)<0){\n          newArr.push(image)\n        }\n      }\n    return newArr\n  }\n \n  render() {\n    return (\n      <div className=\"body\">\n        <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro\" rel=\"stylesheet\"/>\n        <script src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossOrigin=\"anonymous\"></script>  \n        <Header score={this.state.score} hScore={this.state.hScore}/>\n          { this.randomImage().map(e => \n              ( \n                <Image  updateClicked={this.updateClicked} \n                        name={e.name} \n                        img={e.img}/> \n              ))\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}